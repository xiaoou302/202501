---
globs: lib/utils/constants.dart
---

# Constants Definition Guidelines

## Structure of constants.dart

Organize all app constants in a single file for easy maintenance.

```dart
import 'package:flutter/material.dart';

// ============================================================================
// COLORS (The Opus Magnum Color Scheme)
// ============================================================================

class AppColors {
  // Nigredo/黑化 - The void, the beginning
  static const Color voidCharcoal = Color(0xFF1A1A1A);
  
  // Albedo/白化 - Purification, clarity
  static const Color alabasterWhite = Color(0xFFE9E9E9);
  
  // Citrinitas/黄化 - Knowledge, the sun
  static const Color alchemicalGold = Color(0xFFD4AF37);
  
  // Neutral tools
  static const Color neutralSteel = Color(0xFF7A7A7A);
  
  // Rubedo/红化 - Transformation, the final stage
  static const Color rubedoRed = Color(0xFFD13030);
  
  // Utility colors
  static const Color black = Colors.black;
  static const Color transparent = Colors.transparent;
}

// ============================================================================
// TYPOGRAPHY
// ============================================================================

class AppTextStyles {
  static const String serifFont = 'serif';
  static const String sansSerifFont = 'sans-serif';
  
  // Header styles
  static const TextStyle header1 = TextStyle(
    fontFamily: serifFont,
    fontSize: 32,
    fontWeight: FontWeight.bold,
    color: AppColors.alabasterWhite,
  );
  
  static const TextStyle header2 = TextStyle(
    fontFamily: serifFont,
    fontSize: 24,
    fontWeight: FontWeight.bold,
    color: AppColors.alabasterWhite,
  );
  
  static const TextStyle header3 = TextStyle(
    fontFamily: serifFont,
    fontSize: 20,
    fontWeight: FontWeight.bold,
    color: AppColors.alchemicalGold,
  );
  
  // Body text styles
  static const TextStyle bodyLarge = TextStyle(
    fontFamily: serifFont,
    fontSize: 18,
    color: AppColors.alabasterWhite,
    height: 1.6,
  );
  
  static const TextStyle bodyMedium = TextStyle(
    fontFamily: sansSerifFont,
    fontSize: 16,
    color: AppColors.alabasterWhite,
  );
  
  static const TextStyle bodySmall = TextStyle(
    fontFamily: sansSerifFont,
    fontSize: 14,
    color: AppColors.neutralSteel,
  );
  
  // Special styles
  static const TextStyle clue = TextStyle(
    fontFamily: serifFont,
    fontSize: 18,
    fontWeight: FontWeight.bold,
    fontStyle: FontStyle.italic,
    color: AppColors.alchemicalGold,
    height: 1.6,
  );
  
  static const TextStyle buttonText = TextStyle(
    fontFamily: sansSerifFont,
    fontSize: 16,
    fontWeight: FontWeight.bold,
  );
}

// ============================================================================
// SPACING
// ============================================================================

class AppSpacing {
  static const double xs = 4.0;
  static const double sm = 8.0;
  static const double md = 16.0;
  static const double lg = 24.0;
  static const double xl = 32.0;
  static const double xxl = 48.0;
}

// ============================================================================
// BORDER RADIUS
// ============================================================================

class AppRadius {
  static const double sm = 8.0;
  static const double md = 12.0;
  static const double lg = 16.0;
  static const double xl = 24.0;
  
  static BorderRadius get smallRadius => BorderRadius.circular(sm);
  static BorderRadius get mediumRadius => BorderRadius.circular(md);
  static BorderRadius get largeRadius => BorderRadius.circular(lg);
  static BorderRadius get extraLargeRadius => BorderRadius.circular(xl);
}

// ============================================================================
// ALCHEMY ACTIONS
// ============================================================================

enum AlchemyAction {
  dissolve,   // 溶解
  combine,    // 结合
  calcify,    // 煅烧
  sublimate,  // 升华
}

class AlchemyActionData {
  static String getLabel(AlchemyAction action) {
    switch (action) {
      case AlchemyAction.dissolve:
        return 'Dissolve';
      case AlchemyAction.combine:
        return 'Combine';
      case AlchemyAction.calcify:
        return 'Calcify';
      case AlchemyAction.sublimate:
        return 'Sublimate';
    }
  }
  
  static IconData getIcon(AlchemyAction action) {
    switch (action) {
      case AlchemyAction.dissolve:
        return Icons.science;
      case AlchemyAction.combine:
        return Icons.link;
      case AlchemyAction.calcify:
        return Icons.local_fire_department;
      case AlchemyAction.sublimate:
        return Icons.landscape;
    }
  }
  
  static String getValue(AlchemyAction action) {
    return action.toString().split('.').last;
  }
  
  static AlchemyAction fromString(String value) {
    return AlchemyAction.values.firstWhere(
      (a) => a.toString().split('.').last == value,
    );
  }
}

// ============================================================================
// ALCHEMY MATERIALS
// ============================================================================

enum AlchemyMaterial {
  redLion,      // 红狮
  whiteEagle,   // 白鹰
  sulfur,       // 硫磺
  mercury,      // 水银
  greenLion,    // 绿狮
  redKing,      // 红国王
  whiteQueen,   // 白王后
}

class AlchemyMaterialData {
  static String getLabel(AlchemyMaterial material) {
    switch (material) {
      case AlchemyMaterial.redLion:
        return 'Red Lion';
      case AlchemyMaterial.whiteEagle:
        return 'White Eagle';
      case AlchemyMaterial.sulfur:
        return 'Sulfur';
      case AlchemyMaterial.mercury:
        return 'Mercury';
      case AlchemyMaterial.greenLion:
        return 'Green Lion';
      case AlchemyMaterial.redKing:
        return 'Red King';
      case AlchemyMaterial.whiteQueen:
        return 'White Queen';
    }
  }
  
  static IconData getIcon(AlchemyMaterial material) {
    switch (material) {
      case AlchemyMaterial.redLion:
      case AlchemyMaterial.greenLion:
        return Icons.diamond;
      case AlchemyMaterial.whiteEagle:
        return Icons.air;
      case AlchemyMaterial.sulfur:
        return Icons.circle;
      case AlchemyMaterial.mercury:
        return Icons.water_drop;
      case AlchemyMaterial.redKing:
        return Icons.diamond_outlined;
      case AlchemyMaterial.whiteQueen:
        return Icons.star;
    }
  }
  
  static Color getColor(AlchemyMaterial material) {
    switch (material) {
      case AlchemyMaterial.redLion:
      case AlchemyMaterial.redKing:
        return Colors.red.shade400;
      case AlchemyMaterial.whiteEagle:
      case AlchemyMaterial.whiteQueen:
        return AppColors.alabasterWhite;
      case AlchemyMaterial.sulfur:
        return Colors.yellow.shade300;
      case AlchemyMaterial.mercury:
        return Colors.grey.shade400;
      case AlchemyMaterial.greenLion:
        return Colors.green.shade400;
    }
  }
  
  static String getValue(AlchemyMaterial material) {
    return material.toString().split('.').last;
  }
  
  static AlchemyMaterial fromString(String value) {
    return AlchemyMaterial.values.firstWhere(
      (m) => m.toString().split('.').last == value,
    );
  }
}

// ============================================================================
// TEXT CONTENT
// ============================================================================

class AppStrings {
  // App name
  static const String appName = 'Cognifex';
  static const String subtitle = 'The Alchemist\'s Paradox';
  
  // Screen titles
  static const String homeTitle = 'Cognifex';
  static const String studyTitle = 'The Study';
  static const String laboratoryTitle = 'The Laboratory';
  static const String craftingLogTitle = 'Crafting Log';
  static const String revelationsTitle = 'Revelations';
  static const String introductionTitle = 'Introduction';
  static const String settingsTitle = 'Settings';
  
  // Buttons
  static const String beginTheWork = 'Begin The Work';
  static const String lockRecipe = 'Lock Recipe & Enter Laboratory';
  static const String execute = 'Execute';
  static const String beginAnew = 'Begin Anew';
  static const String returnToStudy = 'Return to Study';
  static const String confirmEnter = 'Confirm & Enter';
  static const String resetProgress = 'Reset All Progress';
  
  // Tabs
  static const String encryptedLog = 'Encrypted Log';
  static const String recipeSlate = 'Recipe Slate';
  
  // Messages
  static const String confirmationWarning = 
      'Are you certain? Once in the Laboratory, there is no turning back. Your recipe will be locked.';
  static const String victoryMessage = 
      'The Great Work is Complete';
  static const String victoryDescription = 
      '...the final substance cools in the crucible, emitting a perfect, ruby-like glow.';
  static const String victorySuccess = 
      'You have succeeded. You have created the\n[ Philosopher\'s Stone ].';
  static const String failureMessage = 'A Fatal Error';
  static const String failureDescription = 
      '...the unstable mixture boils over, emitting a piercing shriek. You do not even have time to step back.';
  static const String failureEnd = 
      'The laboratory is consumed in the blast.\nYour work is at an end.';
  
  // Placeholders
  static const String selectAction = '[Select Action]';
  static const String selectMaterial = '[Select Material]';
}

// ============================================================================
// GAME CONFIGURATION
// ============================================================================

class GameConfig {
  static const int totalSteps = 12;
  static const int maxAttempts = 999; // Effectively unlimited
  
  // Animation durations
  static const Duration shakeAnimationDuration = Duration(milliseconds: 500);
  static const Duration pulseAnimationDuration = Duration(milliseconds: 1500);
  static const Duration fadeAnimationDuration = Duration(milliseconds: 300);
  
  // Settings
  static const List<String> textSpeedOptions = ['Slow', 'Normal', 'Fast'];
}
```

## Usage in Code

```dart
// Colors
Container(
  color: AppColors.voidCharcoal,
  child: Text(
    'Sample Text',
    style: AppTextStyles.bodyLarge,
  ),
)

// Enums
final action = AlchemyAction.dissolve;
final label = AlchemyActionData.getLabel(action); // 'Dissolve'
final icon = AlchemyActionData.getIcon(action);   // Icons.science

// Spacing
Padding(
  padding: EdgeInsets.all(AppSpacing.md),
  child: ...
)

// Border radius
Container(
  decoration: BoxDecoration(
    borderRadius: AppRadius.mediumRadius,
  ),
)
```

## Best Practices

1. **Never hardcode values** - Always use constants
2. **Add new constants here** - Don't scatter them across files
3. **Use semantic names** - `alchemicalGold` not `color1`
4. **Group related constants** - Use classes as namespaces
5. **Document enum mappings** - Make it easy to get labels/icons from enums
