---
description: Core game mechanics and validation rules for Cognifex
---

# Game Logic & Mechanics

## The Correct Recipe (SECRET)
The game has ONE correct 12-step sequence. This should be hardcoded in `utils/game_logic.dart`.

### Example Structure (you should design the actual puzzle):
```dart
final List<AlchemyStep> correctRecipe = [
  AlchemyStep(stepNumber: 1, action: 'dissolve', material: 'green_lion'),
  AlchemyStep(stepNumber: 2, action: 'combine', material: 'red_king'),
  // ... 10 more steps
];
```

## Game Actions (4 types)
```dart
enum AlchemyAction {
  dissolve,   // 溶解 - Icon: flask-vial
  combine,    // 结合 - Icon: link
  calcify,    // 煅烧 - Icon: fire
  sublimate,  // 升华 - Icon: mountain-sun
}
```

## Game Materials (Variable, but minimum 4)
```dart
enum AlchemyMaterial {
  redLion,      // 红狮 - Icon: gem (red)
  whiteEagle,   // 白鹰 - Icon: feather
  sulfur,       // 硫磺 - Icon: atom (yellow)
  mercury,      // 水银 - Icon: droplet (gray)
  greenLion,    // 绿狮 (additional materials as needed)
  redKing,      // 红国王
  whiteQueen,   // 白王后
}
```

## Validation Rules

### Study Phase (Stage 1)
- **NO validation** during recipe creation
- User can change steps unlimited times
- Only requirement: all 12 steps must be filled before locking
- Show warning modal before locking: "Are you certain? Once in the Laboratory, there is no turning back."

### Laboratory Phase (Stage 2)
```dart
bool validateStep(AlchemyStep userStep, int currentStepIndex) {
  final correctStep = correctRecipe[currentStepIndex];
  
  return userStep.action == correctStep.action &&
         userStep.material == correctStep.material;
}
```

#### Failure Conditions:
1. **Wrong Action**: User selected different action than required
2. **Wrong Material**: User selected different material than required
3. **Out of Order**: Should never happen with proper UI, but validate anyway

#### Success Flow:
1. Validate step → Success
2. Show success message: "Step X complete. The mixture is stable."
3. Progress to next step (X+1/12)
4. Repeat until step 12
5. If step 12 succeeds → Navigate to VictoryScreen

#### Failure Flow:
1. Validate step → Failure
2. Show error message: "Catastrophe! Incorrect reaction!"
3. Record attempt in CraftingLog with:
   - Attempt number
   - Date/time
   - Failed step number
   - What was expected vs what was executed
4. Navigate to FailureScreen
5. Potentially unlock a Revelation

## Clue System (Encrypted Log)

The encrypted log should contain metaphorical clues about the correct sequence:

### Clue Types:
1. **Direct Order Clues**: "The Red King must be tamed before the White Queen..."
2. **Conditional Clues**: "When the moon is in Gemini, Sulfur must precede Mercury..."
3. **Action Hints**: "The Green Lion devours the sun, a violent process. You must first [Dissolve] it..."
4. **Sequential Hints**: "After [Sublimate], the very next must be [Calcify]..."
5. **Red Herrings**: Misleading information to increase difficulty

### Implementation:
```dart
class Clue {
  final String text;
  final List<String> keywords; // Words to highlight in gold
  final bool isRedHerring;
  
  Clue({
    required this.text,
    required this.keywords,
    this.isRedHerring = false,
  });
}
```

## Revelation System

Revelations are unlocked based on player progress:

```dart
class RevelationUnlockCondition {
  final int minAttempts;          // Unlock after X attempts
  final String? specificError;    // Unlock after specific mistake
  final bool requiresCompletion;  // Unlock only after victory
  
  bool checkUnlock(GameState state) {
    // Implementation logic
  }
}
```

### Example Revelations:
1. **"The Nature of the Lion"** - Unlocks after first attempt
2. **"The King and Queen"** - Unlocks after 3 attempts
3. **"The Celestial Order"** - Unlocks after discovering sulfur/mercury order
4. **"The Final Truth"** - Unlocks only after victory

## Attempt Tracking

Each attempt should record:
```dart
class AttemptRecord {
  final int attemptNumber;
  final DateTime timestamp;
  final List<AlchemyStep> attemptedRecipe;
  final bool wasSuccessful;
  final int? failedAtStep;        // null if successful
  final String? failureReason;     // Description of what went wrong
}
```

## Difficulty Considerations

The puzzle difficulty comes from:
1. **Clue Complexity**: How cryptic the metaphors are
2. **Clue Volume**: Amount of information vs red herrings
3. **Sequence Length**: 12 steps is significant
4. **No Partial Feedback**: No hints during execution phase
5. **High Stakes**: One shot in laboratory creates tension

The game should be solvable with careful analysis, note-taking, and logical deduction.
